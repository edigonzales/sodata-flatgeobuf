plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
}

apply from: "$rootDir/gradle/versioning.gradle"

group = 'ch.so.agi.sodata'
sourceCompatibility = '17'

sourceCompatibility = '17'
targetCompatibility = '17'

compileJava {
    options.compilerArgs.addAll(['--release', '17'])
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.graalvm.sdk:graal-sdk:22.3.0'    
     
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('enforceGraalPython') {
    doLast {
    // Ggf ist diese Variante expliziter.
    // Jedoch ist bei Verwendung von sdkman JAVA_HOME nicht zwingend gesetzt.
    /*
        if (!file("$System.env.JAVA_HOME/bin/graalpy").exists()) {
            throw new GradleException("You must set JAVA_HOME to a GraalVM with Python installed.")
        }
    */    
        try {
            exec {
                commandLine "which", "graalpy"
            }   
        } catch (Exception e) {
            throw new GradleException("You must use a GraalVM with Python installed.")
        }
        
    }
}

// TODO: clean should delete this too
tasks.register('prepareEnv') {
    onlyIf {
        !file("${project.rootDir}/venv").exists()
    }
    doLast {
        exec {
            workingDir "${project.rootDir}"
            //commandLine "$System.env.JAVA_HOME/bin/graalpy", "-m", "venv", "venv"
            commandLine "graalpy", "-m", "venv", "venv"
        }
        exec {
            workingDir "${project.rootDir}"
            commandLine 'venv/bin/pip', 'install', 'GDAL==3.4.1'
        }
    }
}

tasks.register('copyVenv', Copy) {
    from ('..') {
        include 'venv/**'
    }
    into 'build/resources/main'
}

tasks.register('zipVenv', Zip) {
    from ('..') {
        include 'venv/**'
        exclude 'venv/bin/**'
        exclude 'venv/**/__pycache__/'
        exclude 'venv/lib/python3.8/site-packages/pip/**'
    }
   archiveName 'venv.zip'
   destinationDir(file('build/resources/main'))
}

prepareEnv.dependsOn(enforceGraalPython)
compileJava.dependsOn(prepareEnv)
classes.dependsOn(copyVenv)
classes.dependsOn(zipVenv)

// Weil die venv-Zip-Datei im Artefakt landet, braucht es den Ordner
// nicht. Dieser wird nur zum Entwickeln gebraucht.
jar {
    exclude 'venv/**'
}